---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring-stack
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: monitoring-stack
spec:
  selector:
    app: redis
  ports:
    - port: 6379
      targetPort: 6379
  type: ClusterIP
---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: monitoring-stack
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:latest
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
---
# Elasticsearch PersistentVolume
apiVersion: v1
kind: PersistentVolume
metadata:
  name: elasticsearch-pv
  namespace: monitoring-stack
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mnt/data/elasticsearch
  storageClassName: standard
---
# Elasticsearch PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: elasticsearch-pvc
  namespace: monitoring-stack
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard
---
# Elasticsearch Service
apiVersion: v1
kind: Service
metadata:
  name: es01
  namespace: monitoring-stack
spec:
  selector:
    app: elasticsearch
  ports:
    - port: 9200
      targetPort: 9200
  type: ClusterIP
---
# Elasticsearch Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch
  namespace: monitoring-stack
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      containers:
      - name: elasticsearch
        image: docker.elastic.co/elasticsearch/elasticsearch:9.0.0
        ports:
        - containerPort: 9200
        env:
        - name: discovery.type
          value: "single-node"
        - name: ES_JAVA_OPTS
          value: "-Xms1g -Xmx1g"
        - name: xpack.security.enabled
          value: "false"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        volumeMounts:
        - name: elasticsearch-storage
          mountPath: /usr/share/elasticsearch/data
      volumes:
      - name: elasticsearch-storage
        persistentVolumeClaim:
          claimName: elasticsearch-pvc
---
# Kibana Service
apiVersion: v1
kind: Service
metadata:
  name: kib01
  namespace: monitoring-stack
spec:
  selector:
    app: kibana
  ports:
    - port: 5601
      targetPort: 5601
  type: NodePort
---
# Kibana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
  namespace: monitoring-stack
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec:
      containers:
      - name: kibana
        image: docker.elastic.co/kibana/kibana:9.0.0
        ports:
        - containerPort: 5601
        env:
        - name: ELASTICSEARCH_HOSTS
          value: "http://es01:9200"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      initContainers:
      - name: wait-for-elasticsearch
        image: busybox:1.28
        command: ['sh', '-c', 'until nc -z es01 9200; do echo waiting for elasticsearch; sleep 2; done;']
---
# ConfigMap for Filebeat
apiVersion: v1
kind: ConfigMap
metadata:
  name: filebeat-config
  namespace: monitoring-stack
data:
  filebeat.yml: |
    filebeat.inputs:
      - type: filestream
        enabled: true
        paths:
          - /logs/request_logs/*.log
          - /logs/error_logs/*.log
        parsers:
          - ndjson:
              target: ""
              add_error_key: true
              expand_keys: true
    
    output.elasticsearch:
      hosts: ["http://es01:9200"]
    
    setup.kibana:
      host: "http://kib01:5601"
---
# Filebeat Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: filebeat
  namespace: monitoring-stack
spec:
  replicas: 1
  selector:
    matchLabels:
      app: filebeat
  template:
    metadata:
      labels:
        app: filebeat
    spec:
      containers:
      - name: filebeat
        image: docker.elastic.co/beats/filebeat:9.0.0
        volumeMounts:
        - name: filebeat-config
          mountPath: /usr/share/filebeat/filebeat.yml
          subPath: filebeat.yml
        - name: app-logs
          mountPath: /logs
          readOnly: true
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: filebeat-config
        configMap:
          name: filebeat-config
      - name: app-logs
        hostPath:
          path: /tmp/logs
          type: DirectoryOrCreate
      initContainers:
      - name: wait-for-elasticsearch
        image: busybox:1.28
        command: ['sh', '-c', 'until nc -z es01 9200; do echo waiting for elasticsearch; sleep 2; done;']
---
# ConfigMap for Prometheus
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring-stack
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
    
    scrape_configs:
      - job_name: 'praxis-app'
        static_configs:
          - targets: ['praxis-app:4000']
        metrics_path: /metrics
        scrape_interval: 30s
---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring-stack
spec:
  selector:
    app: prometheus
  ports:
    - port: 9090
      targetPort: 9090
  type: NodePort
---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring-stack
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/prometheus.yml
          subPath: prometheus.yml
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring-stack
spec:
  selector:
    app: grafana
  ports:
    - port: 3000
      targetPort: 3000
  type: NodePort
---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring-stack
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana-oss:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_USER
          value: "admin"
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      initContainers:
      - name: wait-for-prometheus
        image: busybox:1.28
        command: ['sh', '-c', 'until nc -z prometheus 9090; do echo waiting for prometheus; sleep 2; done;']
---
# Praxis App Service
apiVersion: v1
kind: Service
metadata:
  name: praxis-app
  namespace: monitoring-stack
spec:
  selector:
    app: praxis-app
  ports:
    - port: 4000
      targetPort: 4000
  type: NodePort
---
# Praxis App Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: praxis-app
  namespace: monitoring-stack
spec:
  replicas: 1
  selector:
    matchLabels:
      app: praxis-app
  template:
    metadata:
      labels:
        app: praxis-app
    spec:
      containers:
      - name: praxis-app
        image: praxis-app:latest
        ports:
        - containerPort: 4000
        env:
        - name: REDIS_URL
          value: "redis://redis:6379/0"
        - name: CELERY_BROKER_URL
          value: "redis://redis:6379/0"
        - name: ELASTICSEARCH_HOST
          value: "es01"
        volumeMounts:
        - name: app-logs-error
          mountPath: /app/error_logs
        - name: app-logs-request
          mountPath: /app/request_logs
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: app-logs-error
        hostPath:
          path: /tmp/logs/error_logs
          type: DirectoryOrCreate
      - name: app-logs-request
        hostPath:
          path: /tmp/logs/request_logs
          type: DirectoryOrCreate
      initContainers:
      - name: wait-for-redis
        image: busybox:1.28
        command: ['sh', '-c', 'until nc -z redis 6379; do echo waiting for redis; sleep 2; done;']
      - name: wait-for-elasticsearch
        image: busybox:1.28
        command: ['sh', '-c', 'until nc -z es01 9200; do echo waiting for elasticsearch; sleep 2; done;']
---
# Praxis Celery Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: praxis-celery
  namespace: monitoring-stack
spec:
  replicas: 1
  selector:
    matchLabels:
      app: praxis-celery
  template:
    metadata:
      labels:
        app: praxis-celery
    spec:
      containers:
      - name: praxis-celery
        image: praxis-celery:latest
        env:
        - name: REDIS_URL
          value: "redis://redis:6379/0"
        - name: CELERY_BROKER_URL
          value: "redis://redis:6379/0"
        command: ["sh", "-c", "pdm run mail"]
        volumeMounts:
        - name: app-logs-error
          mountPath: /app/error_logs
        - name: app-logs-request
          mountPath: /app/request_logs
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
      volumes:
      - name: app-logs-error
        hostPath:
          path: /tmp/logs/error_logs
          type: DirectoryOrCreate
      - name: app-logs-request
        hostPath:
          path: /tmp/logs/request_logs
          type: DirectoryOrCreate
      initContainers:
      - name: wait-for-redis
        image: busybox:1.28
        command: ['sh', '-c', 'until nc -z redis 6379; do echo waiting for redis; sleep 2; done;']
---
# Nginx ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: monitoring-stack
data:
  nginx.conf: |
    events {
        worker_connections 1024;
    }
    
    http {
        upstream app {
            server praxis-app:4000;
        }
        
        server {
            listen 80;
            
            location / {
                proxy_pass http://app;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            location /static/ {
                alias /app/static/;
            }
            
            location /media/ {
                alias /app/media/;
            }
        }
    }
---
# Nginx Service
apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: monitoring-stack
spec:
  selector:
    app: nginx
  ports:
    - port: 80
      targetPort: 80
  type: NodePort
---
# Nginx Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: monitoring-stack
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: static-files
          mountPath: /app/static
        - name: media-files
          mountPath: /app/media
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: static-files
        hostPath:
          path: /tmp/static
          type: DirectoryOrCreate
      - name: media-files
        hostPath:
          path: /tmp/media
          type: DirectoryOrCreate
      initContainers:
      - name: wait-for-app
        image: busybox:1.28
        command: ['sh', '-c', 'until nc -z praxis-app 4000; do echo waiting for praxis-app; sleep 2; done;']