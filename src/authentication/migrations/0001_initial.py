# Generated by Django 5.2.1 on 2025-05-12 18:07

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True, validators=[django.core.validators.EmailValidator(message='Enter a valid email address.')], verbose_name='email address')),
                ('username', models.CharField(blank=True, max_length=150, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Enter a valid username. This value may contain only letters, numbers, and @/./+/-/_ characters.', regex='^[\\w.@+-]+$')], verbose_name='username')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='phone number')),
                ('website', models.URLField(blank=True, null=True, unique=True, validators=[django.core.validators.URLValidator(message='Enter a valid URL.')], verbose_name='website')),
                ('first_name', models.CharField(blank=True, max_length=150, null=True, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, null=True, verbose_name='last name')),
                ('full_name', models.CharField(blank=True, max_length=300, null=True, verbose_name='full name')),
                ('bio', models.TextField(blank=True, max_length=500, null=True, verbose_name='biography')),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profile_images/', verbose_name='profile image')),
                ('role', models.CharField(choices=[('admin', 'Administrator'), ('staff', 'Staff'), ('user', 'Regular User')], default='user', max_length=20, verbose_name='role')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='last updated')),
                ('email_verified', models.BooleanField(default=False, verbose_name='email verified')),
                ('failed_login_attempts', models.PositiveIntegerField(default=0, verbose_name='failed login attempts')),
                ('last_failed_login', models.DateTimeField(blank=True, null=True, verbose_name='last failed login')),
                ('password_changed', models.DateTimeField(blank=True, null=True, verbose_name='password last changed')),
                ('password_reset_token', models.CharField(blank=True, max_length=100, null=True, verbose_name='password reset token')),
                ('password_reset_expires', models.DateTimeField(blank=True, null=True, verbose_name='password reset expiration')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='email notifications')),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('last_active', models.DateTimeField(blank=True, null=True)),
                ('account_locked', models.BooleanField(default=False)),
                ('account_locked_at', models.DateTimeField(blank=True, null=True)),
                ('email_verification_token', models.CharField(blank=True, max_length=100, null=True)),
                ('email_verification_sent', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['-date_joined'],
            },
        ),
        migrations.CreateModel(
            name='UserIPAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(help_text='IP address used by the user', verbose_name='IP Address')),
                ('first_seen', models.DateTimeField(auto_now_add=True, help_text='When this IP was first used by this user', verbose_name='First Seen')),
                ('last_seen', models.DateTimeField(auto_now=True, help_text='When this IP was last used by this user', verbose_name='Last Seen')),
                ('use_count', models.PositiveIntegerField(default=1, help_text='Number of times this IP has been used by this user', verbose_name='Use Count')),
                ('is_suspicious', models.BooleanField(default=False, help_text='Marked as suspicious by system', verbose_name='Suspicious')),
                ('country', models.CharField(blank=True, help_text='Country derived from IP address', max_length=100, null=True, verbose_name='Country')),
                ('city', models.CharField(blank=True, help_text='City derived from IP address', max_length=100, null=True, verbose_name='City')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ip_addresses', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User IP Address',
                'verbose_name_plural': 'User IP Addresses',
                'ordering': ['-last_seen'],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='authenticat_email_d74434_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username'], name='authenticat_usernam_61ef80_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_active'], name='authenticat_is_acti_099f68_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role'], name='authenticat_role_7fb088_idx'),
        ),
        migrations.AddIndex(
            model_name='useripaddress',
            index=models.Index(fields=['user'], name='authenticat_user_id_21152f_idx'),
        ),
        migrations.AddIndex(
            model_name='useripaddress',
            index=models.Index(fields=['ip_address'], name='authenticat_ip_addr_525e53_idx'),
        ),
        migrations.AddIndex(
            model_name='useripaddress',
            index=models.Index(fields=['last_seen'], name='authenticat_last_se_4d7956_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='useripaddress',
            unique_together={('user', 'ip_address')},
        ),
    ]
